package main

import (
	"bufio"
	"encoding/hex"
	"fmt"
	"os"
	"sync"

	"github.com/ambalabanov/go/ctr"
	"github.com/ambalabanov/go/kdf"
	"github.com/ambalabanov/go/npmjs"
)

var wg sync.WaitGroup

func main() {

	fWordlistName := "wordlist.txt"
	_, err := os.Stat(fWordlistName)
	if err != nil {
		npmjs.Get(fWordlistName)
	}
	fWordlist, err := os.Open(fWordlistName)
	if err != nil {
		panic(err)
	}
	defer fWordlist.Close()

	scanner := bufio.NewScanner(fWordlist)
	for scanner.Scan() {
		pass := scanner.Text()
		wg.Add(1)
		go brute(pass)

	}
	if err := scanner.Err(); err != nil {
		panic(err)
	}
	wg.Wait()
}
func brute(pass string) {
	cipherText := "83729c4575f56a8287c0b4e8ee5c33f8cb891ccaddcafb71ef5f7bd067f19d854ab16e0cb22460"
	cipherTextDecoded, _ := hex.DecodeString(cipherText)
	key := kdf.Kdf(pass, 48)[:32]
	iv := kdf.Kdf(pass, 48)[32:]
	plain := string(ctr.Crypt(cipherTextDecoded, key, iv))
	if plain[:4] == "HTB{" {
		fmt.Println("Congratz!!!")
		fmt.Println("Pass:" + "\t" + pass)
		fmt.Println("Key:" + "\t" + hex.EncodeToString(key))
		fmt.Println("IV:" + "\t" + hex.EncodeToString(iv))
		fmt.Println("Plain:" + "\t" + plain)
		os.Exit(0)
	}
	wg.Done()
}
